{
  "version": 3,
  "file": "247.4d7dc3c4.iframe.bundle.js",
  "mappings": ";;;;;;;;;;;;;;AAQA;AACA;;;;;;;;;;;AAWA;AAGA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;;;;;;;;;;AAUA;;;;;AASA;AACA;;;;;;;;;AASA;ACxBA;;;;;;;AAOA;ACPA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;ACJA;AChBA;;;;;;;;;;;;;;;;;;;AAmBA;ACnBA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;AC/BA;ACGA;;;;;;;AAOA;ACPA;;;;;;;AAOA;ACPA;;;;;;;;;;;;;;AAcA;;;;;;;;;;ACjBA;ACQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;ACvCA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;ACtBA;;;;;;;;;;;;;ACAA",
  "sources": [
    "webpack://aces-maverick/./src/libs/clients/contentful/lib/queries/component-queries.tsx",
    "webpack://aces-maverick/./src/libs/clients/contentful/lib/queries/page-queries.tsx",
    "webpack://aces-maverick/./src/libs/clients/contentful/lib/queries/tags-queries.tsx",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-button/services.ts",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-banner/services.ts",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-rich-text-render/services.ts",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-card/services.ts",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-card-slider/services.ts",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-header/skeleton.tsx",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-image/services.ts",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-link/services.ts",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-link-text/services.ts",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-video-embed/skeleton.tsx",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-lockup/services.ts",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-logo/services.ts",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-rich-text-section/skeleton.tsx",
    "webpack://aces-maverick/./src/libs/cf/lib/cf-styled-list/skeleton.tsx"
  ],
  "sourcesContent": [
    "import { gql } from \"@apollo/client\";\n\nexport const PageLinkFragment = gql`\n  fragment PageLink on Page {\n    slug\n  }\n`;\n\nexport const LinkFragment = gql`\n  ${PageLinkFragment}\n\n  fragment Link on Link {\n    internalTitle\n    linkType\n    pageLink {\n      ...PageLink\n    }\n    customLink\n    target\n  }\n`;\n\nexport const ButtonFragment = gql`\n  ${LinkFragment}\n\n  fragment Button on Button {\n    internalTitle\n    title\n    link {\n      ...Link\n    }\n    buttonStyle\n    sys {\n      id\n    }\n    __typename\n  }\n`;\n\nexport const ImageFragment = gql`\n  fragment Image on Image {\n    internalTitle\n    image {\n      url\n      width\n      height\n    }\n    altText\n    sys {\n      id\n    }\n    __typename\n  }\n`;\n\nexport const ModalFragment = gql`\n  fragment Modal on Modal {\n    sys {\n      id\n    }\n    internalTitle\n    modalHeadline\n    modalSubhead\n    modalBodyCollection {\n      items {\n        ... on Accordions {\n          internalTitle\n          accordionsCollection {\n            items {\n              internalTitle\n              headline\n              bodyCopy {\n                json\n              }\n            }\n          }\n          sys {\n            id\n          }\n        }\n      }\n    }\n    __typename\n  }\n`;\n",
    "import { gql } from \"@apollo/client\";\n\nexport const DefaultPageBodyQuery = gql`\n  query ($id: String!, $preview: Boolean!) {\n    page(id: $id, preview: $preview) {\n      pageBodyCollection {\n        items {\n          ... on Banner {\n            sys {\n              id\n            }\n          }\n          ... on CardSlider {\n            sys {\n              id\n            }\n          }\n          ... on Header {\n            sys {\n              id\n            }\n          }\n          ... on Image {\n            sys {\n              id\n            }\n          }\n          ... on Lockup {\n            sys {\n              id\n            }\n          }\n          ... on RichTextSection {\n            sys {\n              id\n            }\n          }\n          ... on VideoEmbed {\n            sys {\n              id\n            }\n          }\n          __typename\n        }\n      }\n    }\n  }\n`;\n\nexport const PageQuery = gql`\n  query ($slug: String!, $preview: Boolean!) {\n    pageCollection(where: { slug: $slug }, limit: 1, preview: $preview) {\n      items {\n        title\n        slug\n        specialtyPage\n        seo\n        sys {\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport const SpecialtyPageQuery = gql`\n  query ($specialtyPage: String!, $preview: Boolean!) {\n    pageCollection(\n      where: { specialtyPage: $specialtyPage }\n      limit: 1\n      preview: $preview\n    ) {\n      items {\n        title\n        slug\n        seo\n        pageHero {\n          __typename\n          sys {\n            id\n          }\n        }\n        sys {\n          id\n        }\n      }\n    }\n  }\n`;\n",
    "import { gql } from \"@apollo/client\";\n\nimport { ImageFragment } from \"./component-queries\";\n\nexport const TeamMemberFragment = gql`\n  ${ImageFragment}\n\n  fragment TeamMember on TeamMember {\n    name\n    role\n    description\n    profileImage {\n      ...Image\n    }\n  }\n`;\n\nexport const CategoriesFragment = gql`\n  fragment Categories on Categories {\n    title\n    slug\n  }\n`;\n\nexport const AllCategoriesQuery = gql`\n  ${CategoriesFragment}\n\n  query ($preview: Boolean!, $locale: String!) {\n    categoriesCollection(preview: $preview, locale: $locale) {\n      items {\n        ...Categories\n      }\n    }\n  }\n`;\n",
    "import { gql } from \"@apollo/client\";\n\nimport {\n  ButtonFragment,\n  cfClient,\n  cfPreviewClient,\n} from \"@aces/contentful\";\nimport { defaultLocale } from \"@aces/i18n\";\n\nexport const ButtonQuery = gql`\n  ${ButtonFragment}\n\n  query ($id: String!, $preview: Boolean!, $locale: String) {\n    button(id: $id, preview: $preview, locale: $locale) {\n      ...Button\n    }\n  }\n`;\n\nexport const fetchButton = async (\n  id: string,\n  preview = false,\n  locale: string = defaultLocale,\n) => {\n  const client = preview ? cfPreviewClient : cfClient;\n  try {\n    const response = await client.query({\n      query: ButtonQuery,\n      variables: { id, preview, locale },\n    });\n\n    return response.data.button;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\n",
    "import { gql } from \"@apollo/client\";\n\nimport {\n  ButtonFragment,\n  cfClient,\n  cfPreviewClient,\n} from \"@aces/contentful\";\nimport { defaultLocale } from \"@aces/i18n\";\n\nexport const BannerQuery = gql`\n  ${ButtonFragment}\n\n  query ($id: String!, $preview: Boolean!, $locale: String) {\n    banner(id: $id, preview: $preview, locale: $locale) {\n      internalTitle\n      headline\n      subhead\n      button {\n        ...Button\n      }\n      backgroundColor\n      sys {\n        id\n      }\n    }\n  }\n`;\n\nexport const fetchBannerData = async (\n  id: string,\n  preview = false,\n  locale: string = defaultLocale,\n) => {\n  const client = preview ? cfPreviewClient : cfClient;\n  try {\n    const response = await client.query({\n      query: BannerQuery,\n      variables: { id, preview, locale },\n    });\n\n    return response.data.banner;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\n",
    "import { gql } from \"@apollo/client\";\n\nimport { cfClient } from \"@aces/contentful\";\n\nexport const RichTextRenderQuery = gql`\n  query ($id: String!, $preview: Boolean!, $locale: String!) {\n    entryCollection(\n      where: { sys: { id: $id } }\n      limit: 1\n      preview: $preview\n      locale: $locale\n    ) {\n      items {\n        sys {\n          id\n        }\n        __typename\n      }\n    }\n  }\n`;\n\nexport const fetchRichTextEmbedEntry = async (\n  id: string,\n  preview = false,\n  locale: string = \"en-US\",\n) => {\n  try {\n    const response = await cfClient.query({\n      query: RichTextRenderQuery,\n      variables: { id, preview, locale },\n    });\n\n    if (response.data.entryCollection.items.length) {\n      return response.data.entryCollection.items[0];\n    }\n\n    return null;\n  } catch (error) {\n    console.error(`Error fetching entry with ID ${id}:`, error);\n    return null;\n  }\n};\n",
    "import { gql } from \"@apollo/client\";\n\nimport { ImageFragment, cfClient, cfPreviewClient } from \"@aces/contentful\";\nimport { defaultLocale } from \"@aces/i18n\";\n\nexport const CardQuery = gql`\n  ${ImageFragment}\n\n  query ($id: String!, $preview: Boolean!, $locale: String) {\n    card(id: $id, preview: $preview, locale: $locale) {\n      internalTitle\n      cardType\n      headline\n      bodyCopy {\n        json\n      }\n      image {\n        ...Image\n      }\n      imageSize\n      sys {\n        id\n      }\n    }\n  }\n`;\n\nexport const fetchCardData = async (\n  id: string,\n  preview = false,\n  locale: string = defaultLocale,\n) => {\n  const client = preview ? cfPreviewClient : cfClient;\n  try {\n    const response = await client.query({\n      query: CardQuery,\n      variables: { id, preview, locale },\n    });\n\n    return response.data.card;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\n",
    "import { gql } from \"@apollo/client\";\n\nimport { ImageFragment, cfClient, cfPreviewClient } from \"@aces/contentful\";\nimport { defaultLocale } from \"@aces/i18n\";\n\nexport const CardSliderQuery = gql`\n  ${ImageFragment}\n\n  query ($id: String!, $preview: Boolean!, $locale: String) {\n    cardSlider(id: $id, preview: $preview, locale: $locale) {\n      internalTitle\n      headline\n      bodyCopy {\n        json\n      }\n      cardsCollection(limit: 12) {\n        items {\n          cardType\n          headline\n          bodyCopy {\n            json\n          }\n          image {\n            ...Image\n          }\n          imageSize\n        }\n      }\n      sys {\n        id\n      }\n    }\n  }\n`;\nexport const fetchCardSlider = async (\n  id: string,\n  preview = false,\n  locale: string = defaultLocale,\n) => {\n  const client = preview ? cfPreviewClient : cfClient;\n  try {\n    const response = await client.query({\n      query: CardSliderQuery,\n      variables: { id, preview, locale },\n    });\n\n    return response.data.cardSlider;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\n",
    "import { Skeleton } from \"@aces/ui\";\n\nexport const HeaderSkeleton = () => {\n  return <Skeleton width={\"100%\"} height={275} />;\n};\n",
    "import { gql } from \"@apollo/client\";\n\nimport { cfClient, cfPreviewClient, ImageFragment } from \"@aces/contentful\";\n\nexport const ImageQuery = gql`\n  ${ImageFragment}\n\n  query ($id: String!, $preview: Boolean!, $locale: String) {\n    image(id: $id, preview: $preview, locale: $locale) {\n      ...Image\n    }\n  }\n`;\n\nexport const fetchImageData = async (\n  id: string,\n  preview = false,\n  locale: string = \"en-US\",\n) => {\n  const client = preview ? cfPreviewClient : cfClient;\n  try {\n    const response = await client.query({\n      query: ImageQuery,\n      variables: { id, preview, locale },\n    });\n\n    return response.data.image;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\n",
    "import { gql } from \"@apollo/client\";\n\nimport { cfClient, LinkFragment } from \"@aces/contentful\";\n\nexport const LinkQuery = gql`\n  ${LinkFragment}\n\n  query ($id: String!, $preview: Boolean!, $locale: String) {\n    link(id: $id, preview: $preview, locale: $locale) {\n      ...Link\n    }\n  }\n`;\n\nexport const fetchLinkData = async (\n  id: string,\n  preview = false,\n  locale: string = \"en-US\"\n) => {\n  try {\n    const response = await cfClient.query({\n      query: LinkQuery,\n      variables: { id, preview, locale },\n    });\n\n    return response.data.link;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\n",
    "import { gql } from \"@apollo/client\";\n\nimport { cfClient, cfPreviewClient, LinkFragment } from \"@aces/contentful\";\n\nexport const LinkTextQuery = gql`\n  ${LinkFragment}\n\n  query ($id: String!, $preview: Boolean!, $locale: String) {\n    linkText(id: $id, preview: $preview, locale: $locale) {\n      internalTitle\n      title\n      link {\n        ...Link\n      }\n      sys {\n        id\n      }\n    }\n  }\n`;\n\nexport const fetchLinkTextData = async (\n  id: string,\n  preview = false,\n  locale: string = \"en-US\",\n) => {\n  const client = preview ? cfPreviewClient : cfClient;\n  try {\n    const response = await client.query({\n      query: LinkTextQuery,\n      variables: { id, preview, locale },\n    });\n\n    return response.data.linkText;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\n",
    "import { Skeleton } from \"@aces/ui\";\n\nexport const VideoEmbedSkeleton = () => {\n  return <Skeleton width={\"100%\"} height={275} />;\n};\n",
    "import { gql } from \"@apollo/client\";\n\nimport {\n  ButtonFragment,\n  cfClient,\n  cfPreviewClient,\n} from \"@aces/contentful\";\nimport { defaultLocale } from \"@aces/i18n\";\n\nexport const LockupQuery = gql`\n  ${ButtonFragment}\n\n  query ($id: String!, $preview: Boolean!, $locale: String) {\n    lockup(id: $id, preview: $preview, locale: $locale) {\n      internalTitle\n      headline\n      bodyCopy {\n        json\n      }\n      buttonsCollection(limit: 2) {\n        items {\n          ...Button\n        }\n      }\n      media {\n        __typename\n        ... on Image {\n          sys {\n            id\n          }\n        }\n        ... on VideoEmbed {\n          sys {\n            id\n          }\n        }\n      }\n      mediaSize\n      mediaAlignment\n      sys {\n        id\n      }\n    }\n  }\n`;\n\nexport const fetchLockup = async (\n  id: string,\n  preview = false,\n  locale: string = defaultLocale,\n) => {\n  const client = preview ? cfPreviewClient : cfClient;\n  try {\n    const response = await client.query({\n      query: LockupQuery,\n      variables: { id, preview, locale },\n    });\n    return response.data.lockup;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\n",
    "import { gql } from \"@apollo/client\";\n\nimport { cfClient, cfPreviewClient, ImageFragment } from \"@aces/contentful\";\n\nexport const LogoQuery = gql`\n  ${ImageFragment}\n\n  query ($id: String!, $preview: Boolean!, $lang: String!) {\n    appsCollection(\n      where: { appId: $id }\n      limit: 1\n      preview: $preview\n      locale: $lang\n    ) {\n      items {\n        fullColorLogo {\n          ...Image\n        }\n        knockoutLogo {\n          ...Image\n        }\n      }\n    }\n  }\n`;\n\nexport const fetchLogoData = async (\n  id: string,\n  preview: boolean,\n  lang: string,\n) => {\n  const client = preview ? cfPreviewClient : cfClient;\n\n  try {\n    const response = await client.query({\n      query: LogoQuery,\n      variables: { id, preview, lang },\n    });\n\n    return {\n      fullColorLogo: response.data.appsCollection.items[0].fullColorLogo,\n      knockoutLogo: response.data.appsCollection.items[0].knockoutLogo,\n    };\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\n",
    "import { Skeleton } from \"@aces/ui\";\n\nexport const RichTextSectionSkeleton = () => {\n  return <Skeleton width=\"100%\" height={275} />;\n};\n",
    "import { FlexBox, List, ListItem, Skeleton } from \"@aces/ui\";\n\nexport const StyledListSkeleton = () => {\n  return (\n    <List\n      style={{\n        columnCount: { xs: 1, md: 2 },\n        columnGap: 12,\n        paddingBottom: 0,\n      }}\n    >\n      {Array.from({ length: 3 }).map((_, index) => (\n        <ListItem\n          key={index}\n          style={{\n            alignItems: \"flex-start\",\n            display: \"flex\",\n            marginBottom: `18px !important`,\n          }}\n        >\n          <FlexBox alignItems=\"center\" style={{ width: \"100%\" }}>\n            <Skeleton\n              variant=\"rectangular\"\n              width={18}\n              height={12}\n              style={{ marginRight: 3 }}\n            />\n            <Skeleton variant=\"text\" height={24} width=\"100%\" />\n          </FlexBox>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n"
  ],
  "names": [],
  "sourceRoot": ""
}

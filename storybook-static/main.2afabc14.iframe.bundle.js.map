{
  "version": 3,
  "file": "main.2afabc14.iframe.bundle.js",
  "mappings": ";;;;;;;AAmGA",
  "sources": [
    "webpack://aces-maverick/./src/libs/ui/lib/menu.tsx"
  ],
  "sourcesContent": [
    "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { keyframes } from \"@mui/material\";\nimport { Grid2Props as MuiGrid2Props } from \"@mui/material/Grid2\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport MuiMenuItem, {\n  MenuItemProps as MuiMenuItemProps,\n} from \"@mui/material/MenuItem\";\nimport MenuList, {\n  MenuListProps as MuiMenuListProps,\n} from \"@mui/material/MenuList\";\n\nimport { CustomCssProps, Size } from \"@aces/types\";\nimport { Box, Icon } from \"@aces/ui\";\n\nexport interface MenuProps\n  extends MuiMenuListProps,\n    Pick<\n      MuiGrid2Props,\n      \"textAlign\" | \"flexDirection\" | \"alignItems\" | \"gap\" | \"columnGap\"\n    > {\n  columns?: {\n    xs: number;\n    sm?: number;\n    md?: number;\n    lg?: number;\n    xl?: number;\n  };\n}\n\nexport const Menu: React.FC<MenuProps> = ({\n  textAlign = \"left\",\n  flexDirection = \"row\",\n  alignItems = \"center\",\n  gap = 0,\n  columnGap = 0,\n  columns,\n  children,\n}) => {\n  const isGrid = Boolean(columns);\n\n  return (\n    <nav>\n      <MenuList\n        sx={{\n          display: isGrid ? \"grid\" : \"flex\",\n          flexDirection: flexDirection,\n          gridTemplateColumns: isGrid\n            ? {\n                xs: `repeat(${columns?.xs}, 1fr)`,\n                sm: `repeat(${columns?.sm}, 1fr)`,\n                md: `repeat(${columns?.md}, 1fr)`,\n                lg: `repeat(${columns?.lg}, 1fr)`,\n                xl: `repeat(${columns?.xl}, 1fr)`,\n              }\n            : \"auto\",\n          alignItems: alignItems,\n          textAlign: textAlign,\n          gap: gap,\n          columnGap: columnGap,\n        }}\n      >\n        {children}\n      </MenuList>\n    </nav>\n  );\n};\n\nexport const DropDownMenu: React.FC<MenuItemProps> = ({\n  style,\n  children,\n  resize,\n  onMouseEnter,\n  onMouseLeave,\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const hasNestedMenu = React.Children.toArray(children).some(\n    (child) => React.isValidElement(child) && child.type === SubMenu,\n  );\n\n  const fadeIn = keyframes`\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  `;\n\n  return (\n    <MuiMenuItem\n      sx={{\n        position: \"relative\",\n        justifyContent: \"flex-start\",\n        paddingTop: \"1.75rem\",\n        paddingBottom: \"1.75rem\",\n        paddingLeft: { xs: \".75rem\", xl: \"1rem\" },\n        paddingRight: { xs: \".75rem\", xl: \"1rem\" },\n        minHeight: 0,\n        whiteSpace: \"break-spaces\",\n        animation: `${fadeIn} 100ms ease-in-out`,\n        \"&:hover\": {\n          textDecoration: \"none\",\n        },\n        ...style,\n      }}\n      onFocus={handleOpen}\n      onMouseEnter={onMouseEnter ? onMouseEnter : handleOpen}\n      onMouseLeave={onMouseLeave ? onMouseLeave : handleClose}\n    >\n      <Box style={{ alignItems: \"center\", display: \"flex\" }}>\n        <ListItemText\n          sx={{\n            textAlign: \"left\",\n            fontSize: \"inherit\",\n            fontWeight: 700,\n            \"& > span\": resize\n              ? {\n                  fontSize: { xs: \"body2.fontSize\", xl: \"body1.fontSize\" },\n                }\n              : {},\n          }}\n        >\n          {React.Children.toArray(children).filter(\n            (child) => React.isValidElement(child) && child.type !== SubMenu,\n          )}\n        </ListItemText>\n        {hasNestedMenu && (\n          <Icon\n            icon={open ? \"ArrowDropUp\" : \"ArrowDropDown\"}\n            size={20}\n            color=\"text.primary\"\n            marginLeft={1}\n          />\n        )}\n      </Box>\n      {hasNestedMenu &&\n        open &&\n        React.Children.map(children, (child) => {\n          if (React.isValidElement(child) && child.type === SubMenu) {\n            return <>{child}</>;\n          }\n          return null;\n        })}\n    </MuiMenuItem>\n  );\n};\n\ninterface MenuItemProps\n  extends Pick<\n    MuiMenuItemProps,\n    \"disableGutters\" | \"children\" | \"onMouseEnter\" | \"onMouseLeave\"\n  > {\n  size?: Size;\n  nested?: boolean;\n  noPadding?: boolean;\n  hoverUnderline?: boolean;\n  resize?: boolean;\n  style?: CustomCssProps;\n}\n\nexport const MenuItem: React.FC<MenuItemProps> = ({\n  nested = false,\n  disableGutters = false,\n  noPadding = false,\n  hoverUnderline = false,\n  resize,\n  style,\n  children,\n}) => {\n  return (\n    <MuiMenuItem\n      disableGutters={disableGutters}\n      sx={{\n        position: \"relative\",\n        justifyContent: \"flex-start\",\n        paddingTop: noPadding ? 0 : nested ? \"0.5rem\" : \"1.75rem\",\n        paddingBottom: noPadding ? 0 : nested ? \"0.5rem\" : \"1.75rem\",\n        paddingLeft: disableGutters ? 0 : { xs: 0, lg: \".75rem\", xl: \"1rem\" },\n        paddingRight: disableGutters ? 0 : { xs: 0, lg: \".75rem\", xl: \"1rem\" },\n        minHeight: 0,\n        whiteSpace: \"break-spaces\",\n        \"&:hover\": {\n          textDecoration: hoverUnderline ? \"underline\" : \"none\",\n          ...(hoverUnderline && {\n            backgroundColor: \"transparent\",\n          }),\n        },\n        ...style,\n      }}\n    >\n      <Box style={{ alignItems: \"center\", display: \"flex\" }}>\n        <ListItemText\n          sx={{\n            textAlign: \"left\",\n            fontSize: \"inherit\",\n            fontWeight: 700,\n            \"& > span\": resize\n              ? {\n                  fontSize: { xs: \"body2.fontSize\", xl: \"body1.fontSize\" },\n                }\n              : {},\n          }}\n        >\n          {children}\n        </ListItemText>\n      </Box>\n    </MuiMenuItem>\n  );\n};\n\ninterface MobileMenuItemProps extends Pick<MuiMenuItemProps, \"children\"> {}\n\nexport const MobileMenuItem: React.FC<MobileMenuItemProps> = ({ children }) => {\n  return (\n    <MuiMenuItem\n      sx={{\n        width: \"100%\",\n        paddingY: \"1rem\",\n        paddingLeft: 0,\n        borderBottomWidth: 1,\n        borderBottomStyle: \"solid\",\n        borderBottomColor: \"grey.100\",\n      }}\n    >\n      <ListItemText sx={{ textAlign: \"left\" }}>{children}</ListItemText>\n    </MuiMenuItem>\n  );\n};\n\ninterface SubMenuProps extends Pick<MuiMenuListProps, \"children\"> {\n  boxShadow?: boolean;\n  minWidth?: string;\n  position?: \"left\" | \"right\";\n}\n\nexport const SubMenu: React.FC<SubMenuProps> = ({\n  children,\n  boxShadow = true,\n  minWidth = \"180px\",\n  position = \"right\",\n}) => {\n  return (\n    <MenuList\n      sx={{\n        paddingTop: 4,\n        paddingBottom: 4,\n        position: \"absolute\",\n        top: \"100%\",\n        left: position === \"left\" ? 0 : \"auto\",\n        right: position === \"right\" ? 0 : \"auto\",\n        minWidth: minWidth,\n        width: \"100%\",\n        height: \"auto\",\n        backgroundColor: \"common.white\",\n        color: \"text.primary\",\n        zIndex: 99,\n        flexDirection: \"column\",\n        boxShadow: boxShadow ? \"0px 2px 6px rgba(0, 0, 0, 0.2)\" : \"none\",\n      }}\n    >\n      {children}\n    </MenuList>\n  );\n};\n"
  ],
  "names": [],
  "sourceRoot": ""
}
